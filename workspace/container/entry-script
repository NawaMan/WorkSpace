#!/usr/bin/env bash
# ============================================================================
# user-entry
#
# Container entrypoint script that:
#   - Aligns UID/GID to host-provided values (HOST_UID / HOST_GID)
#   - Creates/updates the user and group as needed
#   - Ensures ownership of $HOME and $WORKSPACE
#   - Grants passwordless sudo to the user
#   - Finally drops privileges and execs as the non-root user
#
# This script is intended to be the ENTRYPOINT of the container.
# ============================================================================

set -euo pipefail

#== Constants ==
USER_NAME="coder"
HOME_DIR="/home/${USER_NAME}"
WORKSPACE="/home/${USER_NAME}/workspace"

# Allow environment to override config
USER_SHELL="${USER_SHELL:-/bin/bash}"
HOST_UID="${HOST_UID:-1000}"
HOST_GID="${HOST_GID:-1000}"

find_free_uid() { local uid=2000; while getent passwd "$uid" >/dev/null 2>&1; do uid=$((uid+1)); done; echo "$uid"; }
find_free_gid() { local gid=2000; while getent group  "$gid" >/dev/null 2>&1; do gid=$((gid+1)); done; echo "$gid"; }

# --- group ---
existing_gid_group="$(getent group "$HOST_GID" | cut -d: -f1 || true)"
if getent group "$USER_NAME" >/dev/null 2>&1; then
  current_gid="$(getent group "$USER_NAME" | cut -d: -f3)"
  if [ "$current_gid" != "$HOST_GID" ]; then
    if [ -n "$existing_gid_group" ] && [ "$existing_gid_group" != "$USER_NAME" ]; then
      groupmod -n "$USER_NAME" "$existing_gid_group"
    else
      groupmod -g "$HOST_GID" "$USER_NAME"
    fi
  fi
else
  if [ -n "$existing_gid_group" ]; then
    groupmod -n "$USER_NAME" "$existing_gid_group"
  else
    groupadd -g "$HOST_GID" "$USER_NAME"
  fi
fi

# --- user ---
existing_uid_user="$(getent passwd "$HOST_UID" | cut -d: -f1 || true)"
if id -u "$USER_NAME" >/dev/null 2>&1; then
  current_uid="$(id -u "$USER_NAME")"
  if [ "$current_uid" != "$HOST_UID" ]; then
    if [ -n "$existing_uid_user" ] && [ "$existing_uid_user" != "$USER_NAME" ]; then
      temp_uid="$(find_free_uid)"; usermod -u "$temp_uid" "$existing_uid_user"
    fi
    usermod -u "$HOST_UID" -g "$HOST_GID" -s "$USER_SHELL" "$USER_NAME"
  else
    usermod -g "$HOST_GID" -s "$USER_SHELL" "$USER_NAME"
  fi
else
  if [ -n "$existing_uid_user" ] && [ "$existing_uid_user" != "$USER_NAME" ]; then
    temp_uid="$(find_free_uid)"; usermod -u "$temp_uid" "$existing_uid_user"
  fi
  if [ -d "$HOME_DIR" ]; then
    useradd -u "$HOST_UID" -g "$HOST_GID" -s "$USER_SHELL" "$USER_NAME"
  else
    useradd -m -u "$HOST_UID" -g "$HOST_GID" -s "$USER_SHELL" "$USER_NAME"
  fi
fi

echo "${USER_NAME} ALL=(ALL) NOPASSWD:ALL" >/etc/sudoers.d/${USER_NAME}
chmod 0440 /etc/sudoers.d/${USER_NAME}

mkdir -p "$HOME_DIR" "$WORKSPACE"
chown -R "$HOST_UID:$HOST_GID" "$HOME_DIR" "$WORKSPACE" || true

export HOME="$HOME_DIR"
export PATH="$HOME/.local/bin:$PATH"

cd "$WORKSPACE" 2>/dev/null || true

if [ "$#" -eq 0 ]; then set -- "$USER_SHELL"; fi
exec runuser -u "$USER_NAME" -- "$@"
