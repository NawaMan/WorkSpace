#!/usr/bin/env bash
set -euo pipefail

#== Constants ==
USER_NAME="coder"
HOME_DIR="/home/${USER_NAME}"
WORKSPACE="/home/${USER_NAME}/workspace"

# Allow environment to override config
USER_SHELL="${USER_SHELL:-/bin/bash}"
HOST_UID="${HOST_UID:-1000}"
HOST_GID="${HOST_GID:-1000}"

find_free_uid() { local uid=2000; while getent passwd "$uid" >/dev/null 2>&1; do uid=$((uid+1)); done; echo "$uid"; }
find_free_gid() { local gid=2000; while getent group  "$gid" >/dev/null 2>&1; do gid=$((gid+1)); done; echo "$gid"; }

# --- GROUP: ensure HOST_GID is owned by group 'coder' ---
# 1) Ensure 'coder' group exists (with any GID for now)
if ! getent group "$USER_NAME" >/dev/null 2>&1; then
  # Prefer HOST_GID if free; otherwise pick a free gid
  if getent group "$HOST_GID" >/dev/null 2>&1; then
    groupadd "$USER_NAME"               # temp gid
  else
    groupadd -g "$HOST_GID" "$USER_NAME"
  fi
fi

# 2) If some other group owns HOST_GID, move it to a free gid (keep its name)
owner_of_host_gid="$(getent group "$HOST_GID" | cut -d: -f1 || true)"
if [ -n "$owner_of_host_gid" ] && [ "$owner_of_host_gid" != "$USER_NAME" ]; then
  tmp_gid="$(find_free_gid)"
  groupmod -g "$tmp_gid" "$owner_of_host_gid"
fi

# 3) Set 'coder' group's gid to HOST_GID (if not already)
current_gid="$(getent group "$USER_NAME" | cut -d: -f3)"
if [ "$current_gid" != "$HOST_GID" ]; then
  groupmod -g "$HOST_GID" "$USER_NAME"
fi

# --- USER: align UID and ensure primary group is 'coder' by name ---
existing_uid_user="$(getent passwd "$HOST_UID" | cut -d: -f1 || true)"
if id -u "$USER_NAME" >/dev/null 2>&1; then
  current_uid="$(id -u "$USER_NAME")"
  if [ "$current_uid" != "$HOST_UID" ]; then
    # If another user has HOST_UID, move them out of the way
    if [ -n "$existing_uid_user" ] && [ "$existing_uid_user" != "$USER_NAME" ]; then
      temp_uid="$(find_free_uid)"; usermod -u "$temp_uid" "$existing_uid_user"
    fi
    usermod -u "$HOST_UID" -g "$USER_NAME" -s "$USER_SHELL" "$USER_NAME"
  else
    usermod -g "$USER_NAME" -s "$USER_SHELL" "$USER_NAME"
  fi
else
  if [ -n "$existing_uid_user" ] && [ "$existing_uid_user" != "$USER_NAME" ]; then
    temp_uid="$(find_free_uid)"; usermod -u "$temp_uid" "$existing_uid_user"
  fi
  if [ -d "$HOME_DIR" ]; then
    useradd -u "$HOST_UID" -g "$USER_NAME" -s "$USER_SHELL" "$USER_NAME"
  else
    useradd -m -u "$HOST_UID" -g "$USER_NAME" -s "$USER_SHELL" "$USER_NAME"
  fi
fi

# sudoers
echo "${USER_NAME} ALL=(ALL) NOPASSWD:ALL" >/etc/sudoers.d/${USER_NAME}
chmod 0440 /etc/sudoers.d/${USER_NAME}

# Home/workspace
mkdir -p "$HOME_DIR" "$WORKSPACE"
# Avoid recursive chown on bind mounts by default; flip CHOWN_RECURSIVE=1 to enable
if [ "${CHOWN_RECURSIVE:-0}" = "1" ]; then
  chown -R "$HOST_UID:$HOST_GID" "$HOME_DIR" "$WORKSPACE" || true
else
  chown "$HOST_UID:$HOST_GID" "$HOME_DIR" "$WORKSPACE" || true
fi

export HOME="$HOME_DIR"
export PATH="$HOME/.local/bin:$PATH"
cd "$WORKSPACE" 2>/dev/null || true

# Exec as coder
[ "$#" -eq 0 ] && set -- "$USER_SHELL"
exec runuser -u "$USER_NAME" -- "$@"
